"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vertical_slice_1 = require("../../../src/model/price/vertical-slice");
var stock_data_1 = require("../../../src/model/price/stock-data");
var direction_1 = require("../../../src/model/price/direction");
test("hasConnectedPrices must return false if there are no connected prices", function () {
    var price = new vertical_slice_1.VerticalSlice(new Date(), 0, 0, 0, 0);
    var hasConnectedPrices;
    hasConnectedPrices = price.hasConnectedPrices(direction_1.Direction.LEFT, 0);
    expect(hasConnectedPrices).toBe(false);
    hasConnectedPrices = price.hasConnectedPrices(direction_1.Direction.RIGHT, 0);
    expect(hasConnectedPrices).toBe(false);
    hasConnectedPrices = price.hasConnectedPrices(direction_1.Direction.LEFT, 1);
    expect(hasConnectedPrices).toBe(false);
    hasConnectedPrices = price.hasConnectedPrices(direction_1.Direction.RIGHT, 1);
    expect(hasConnectedPrices).toBe(false);
});
test("hasConnectedPrices must return false if there are connected price", function () {
    var prices = new stock_data_1.StockData();
    prices.append(new vertical_slice_1.VerticalSlice(new Date(), 1, 1, 1, 1));
    prices.append(new vertical_slice_1.VerticalSlice(new Date(), 2, 2, 2, 2));
    var hasConnectedPrices;
    hasConnectedPrices = prices.first().hasConnectedPrices(direction_1.Direction.LEFT, 1);
    expect(hasConnectedPrices).toBe(false);
    hasConnectedPrices = prices.first().hasConnectedPrices(direction_1.Direction.RIGHT, 1);
    expect(hasConnectedPrices).toBe(true);
    hasConnectedPrices = prices.first().hasConnectedPrices(direction_1.Direction.RIGHT, 2);
    expect(hasConnectedPrices).toBe(false);
    hasConnectedPrices = prices.last().hasConnectedPrices(direction_1.Direction.RIGHT, 1);
    expect(hasConnectedPrices).toBe(false);
    hasConnectedPrices = prices.last().hasConnectedPrices(direction_1.Direction.LEFT, 1);
    expect(hasConnectedPrices).toBe(true);
    hasConnectedPrices = prices.last().hasConnectedPrices(direction_1.Direction.LEFT, 2);
    expect(hasConnectedPrices).toBe(false);
});
test("executeEachIteration must iterate x number of times", function () {
    var prices = new stock_data_1.StockData();
    prices.append(new vertical_slice_1.VerticalSlice(new Date(), 1, 1, 1, 1));
    prices.append(new vertical_slice_1.VerticalSlice(new Date(), 2, 2, 2, 2));
    var counter = 0;
    var onEachIter = function () {
        counter++;
    };
    prices.first().executeEachIteration(direction_1.Direction.LEFT, 0, onEachIter);
    expect(counter).toBe(0);
    counter = 0;
    prices.first().executeEachIteration(direction_1.Direction.RIGHT, 0, onEachIter);
    expect(counter).toBe(0);
    counter = 0;
    prices.first().executeEachIteration(direction_1.Direction.RIGHT, 1, onEachIter);
    expect(counter).toBe(2);
    counter = 0;
    prices.first().executeEachIteration(direction_1.Direction.RIGHT, 2, onEachIter);
    expect(counter).toBe(0);
    counter = 0;
    prices.last().executeEachIteration(direction_1.Direction.RIGHT, 0, onEachIter);
    expect(counter).toBe(0);
    counter = 0;
    prices.last().executeEachIteration(direction_1.Direction.LEFT, 0, onEachIter);
    expect(counter).toBe(0);
    counter = 0;
    prices.last().executeEachIteration(direction_1.Direction.LEFT, 1, onEachIter);
    expect(counter).toBe(2);
    counter = 0;
    prices.last().executeEachIteration(direction_1.Direction.LEFT, 2, onEachIter);
    expect(counter).toBe(0);
    counter = 0;
});
